(define (println f)
    (begin
        (display f)
        (newline)
    )
)

(define env '())
(define-structure (closure f e))

(define (add k v e)
    (cons (cons k v) e))

(define (find k e)
    (cond ((null? e) (error k "argument not found"))
        ((eqv? k (car (car e))) (cdr (car e)))
        (else (find k (cdr e)))
    )
)

(define df (make-closure 1 2))
(println (closure-f df))
; (set!  env (add 'a 2 env))
; (set!  env (add 'b 4 env))
; (println env)
; (println (find 'a env))
; (println (find 'c env))

(define (list-length x)
    (cond ((or (null? x) (not (list? x))) 0)
          (else (+ 1 (list-length (cdr x))))
    )
)

(define (loop x e)
    (let ((xlen (list-length x)))
    (cond   ((eqv? xlen 0)
                (cond   ((symbol? x) (find x e))
                        ((number? x) x))
            )
            ((eqv? xlen 2)
                (let    ((head (loop (car x) e))
                        (tail (loop (car (cdr x)) e)))
                (let ((k (car (car (cdr (closure-f head)))))
                      (exp (car (cdr (cdr (closure-f head))))))
                     (let ((ne (add k tail (closure-e head))))
                          (loop exp ne)
                     )))
            )
            ((eqv? xlen 3)
                (let    ((head (car x)))
                (cond   ((eqv? 'let head)
                            (let    ((k (car (car (cdr x))))
                                     (v (loop (car (cdr (car (cdr x)))) e))
                                     (exp (car (cdr (cdr x))))
                                    )
                                    (let ((ne (add k v e)))
                                        (loop exp ne))
                            )
                        )
                        ((eqv? 'lambda head)
                            (make-closure x e)
                        )
                        (else   (let    ((mid (loop (car (cdr x)) e))
                                        (tail (loop (car (cdr (cdr x))) e)))
                                (cond   ((eqv? '+ head) (+ mid tail))
                                        ((eqv? '- head) (- mid tail))
                                        ((eqv? '* head) (* mid tail))
                                        ((eqv? '/ head) (/ mid tail))
                                ))
                        )
                ))
            )
    ))
)
(println (loop '(+ 1 (* 1 (/ 9 3))) env))
(println (loop '(let (x 1) (let (y (lambda (m) (* 2 m))) (+ x (y 2)))) env))
(println (loop '(let (x 2) (let (f (lambda (y) (* x y)))(let (x 4) (f 3)))) env))
(println (loop '(+ 1 (* 1 (/ 9 x))) env))
(exit)